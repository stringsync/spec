Perform a spec audit. This workflow is designed to ensure that specs are scoped appropriately, don't conflict, and are tagged adequately. You are focused on selector `{{selector}}`.

Follow these steps to complete the audit workflow:

1. Run spec scan
   - Use `spec.scan` without any selectors to understand what specs are defined in the project.

2. Handle orphaned tags
   - If there are any orphaned tags, ask the user how to resolve them:
     - Find an existing relevant spec.
     - Delete the tags.
     - Create a new spec.
   - Offer the user to skip this step.

3. Show specs in scope
   - Run `spec.show` for the selector `{{selector}}` to get the details about the specs in scope.

4. Check clarity and actionability
   - Are the specs declarative and actionable without extra context?
   - If ambiguous, run structured clarification workflow:
     * Scan spec for ambiguity across functional scope, data models, interactions, non-functional requirements, integrations, edge cases, constraints, and terminology
     * Ask up to 5 highly targeted questions (multiple choice or ≤5 word answers)
     * Questions should materially impact architecture, data modeling, task decomposition, test design, UX behavior, or operational readiness
     * Present ONE question at a time using markdown tables for multiple choice:
       | Option | Description |
       |--------|-------------|
       | A | <Option A description> |
       | B | <Option B description> |
       | C | <Option C description> |
       | Short | Provide a different short answer (≤5 words) | (if free-form alternative appropriate)
     * After each answer, immediately integrate clarification into appropriate spec section
     * Save spec file after each integration to prevent context loss
     * Stop when critical ambiguities resolved, user signals completion, or 5 questions reached
   - Offer the user to skip this step.

5. Ensure RFC 2119 language
   - Verify that specs use RFC 2119 key words.
   - If not, reword any offending specs.

6. Validate scope
   - Check that specs are scoped appropriately.
   - If not, split any offending specs while honoring spec naming rules.

7. Summarize
   - Output a simple ordered list summarizing what you did.